// src/pages/PlayerCard.tsx
import { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import { db } from "../firebase";
import {
  doc,
  //getDoc,
  onSnapshot,
  collection,
  getDocs,
  //updateDoc,
} from "firebase/firestore";

// –¢–∏–ø—ã –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ —Å—Ü–µ–Ω–∞—Ä–∏—è

type Card = {
  profession: string; age: string; health: string; phobia: string;
  skill: string; hobby: string; inventory: string; physique: string; fact: string;
};

const labels: Record<keyof Card, string> = {
  profession: "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è",
  age: "–í–æ–∑—Ä–∞—Å—Ç",
  health: "–ó–¥–æ—Ä–æ–≤—å–µ",
  phobia: "–§–æ–±–∏—è",
  skill: "–ù–∞–≤—ã–∫",
  hobby: "–•–æ–±–±–∏",
  inventory: "–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å",
  physique: "–¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ",
  fact: "–§–∞–∫—Ç",
};

type Scenario = {
  catastrophe: { name: string; description: string };
  bunker: {
    size: string; capacity: string; food: string; water: string;
    electricity: string; condition: string; security: string; communication: string;
  };
};

type Player = {
  card?: Card;
  revealed?: boolean;
};

export default function PlayerCard() {
  const { roomId } = useParams();
  const playerName = localStorage.getItem("playerName") || "–ò–≥—Ä–æ–∫";

  const [myCard, setMyCard] = useState<Card | null>(null);
  const [scenario, setScenario] = useState<Scenario | null>(null);
  const [players, setPlayers] = useState<Record<string, Player>>({});

  useEffect(() => {
    if (!roomId) return;

    const roomRef = doc(db, "rooms", roomId);
    const playersRef = collection(db, "rooms", roomId, "players");

    const unsub = onSnapshot(roomRef, (snap) => {
      const data = snap.data();
      if (data?.scenario) setScenario(data.scenario);
    });

    const fetchPlayers = async () => {
      const playerDocs = await getDocs(playersRef);
      const allPlayers: Record<string, Player> = {};
      playerDocs.forEach((doc) => {
        allPlayers[doc.id] = doc.data() as Player;
      });
      setPlayers(allPlayers);
      if (allPlayers[playerName]?.card) {
        setMyCard(allPlayers[playerName].card!);
      }
    };

    fetchPlayers();
    const unsubPlayers = onSnapshot(playersRef, fetchPlayers);

    return () => {
      unsub();
      unsubPlayers();
    };
  }, [roomId, playerName]);

  if (!myCard || !scenario) {
    return <div className="text-white text-center mt-10">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</div>;
  }

  const { catastrophe, bunker } = scenario;

  return (
    <div className="min-h-screen bg-gray-950 text-white p-6 space-y-8">
      {/* –ö–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞ –∏ –±—É–Ω–∫–µ—Ä */}
      <div className="bg-gray-900 p-6 rounded-xl shadow-lg">
        <h2 className="text-2xl font-bold text-red-500">üí• {catastrophe.name}</h2>
        <p className="italic text-gray-300 mb-4">{catastrophe.description}</p>

        <h3 className="text-xl font-semibold mb-2">üè† –£—Å–ª–æ–≤–∏—è –≤ –±—É–Ω–∫–µ—Ä–µ:</h3>
        <ul className="grid grid-cols-1 sm:grid-cols-2 gap-2 text-sm">
          <li>üìê <b>–†–∞–∑–º–µ—Ä:</b> {bunker.size}</li>
          <li>üë• <b>–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:</b> {bunker.capacity}</li>
          <li>ü•´ <b>–ï–¥–∞:</b> {bunker.food}</li>
          <li>üíß <b>–í–æ–¥–∞:</b> {bunker.water}</li>
          <li>‚ö° <b>–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ:</b> {bunker.electricity}</li>
          <li>üèöÔ∏è <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> {bunker.condition}</li>
          <li>üîí <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b> {bunker.security}</li>
          <li>üì° <b>–°–≤—è–∑—å:</b> {bunker.communication}</li>
        </ul>
      </div>

      {/* –ú–æ—è –∫–∞—Ä—Ç–æ—á–∫–∞ */}
      <div className="bg-gray-900 p-6 rounded-xl shadow-lg">
        <h2 className="text-2xl font-bold mb-4 text-center">üßç –ú–æ—è –∫–∞—Ä—Ç–æ—á–∫–∞</h2>
        <ul className="space-y-1">
          {Object.entries(myCard).map(([key, value]) => (
            <li key={key}><b>{labels[key as keyof Card]}:</b> {value}</li>
          ))}
        </ul>
      </div>

      {/* –î—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ */}
      <div className="bg-gray-900 p-6 rounded-xl shadow-lg">
        <h2 className="text-2xl font-bold mb-4 text-center">üë• –ò–≥—Ä–æ–∫–∏</h2>
        <ul className="space-y-4">
          {Object.entries(players).map(([name, data]) => (
            name === playerName ? null : (
              <li key={name} className="bg-gray-800 p-4 rounded-xl">
                <h3 className="font-bold">{name}</h3>
                {data.revealed && data.card ? (
                  <ul className="text-sm mt-1 space-y-1">
                    {Object.entries(data.card).map(([key, value]) => (
                      <li key={key}><b>{labels[key as keyof Card]}:</b> {value}</li>
                    ))}
                  </ul>
                ) : (
                  <p className="italic text-gray-400">–ö–∞—Ä—Ç–æ—á–∫–∞ —Å–∫—Ä—ã—Ç–∞</p>
                )}
              </li>
            )
          ))}
        </ul>
      </div>
    </div>
  );
}
