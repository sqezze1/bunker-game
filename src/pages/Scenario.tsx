import { useEffect, useState } from "react";
import { useParams, useNavigate, /*/useLocation/*/ } from "react-router-dom";
import { doc, onSnapshot, updateDoc, collection, getDocs } from "firebase/firestore";
import { db } from "../firebase";

type Scenario = {
  catastrophe: { name: string; description: string };
  bunker: {
    size: string; capacity: string; food: string; water: string;
    electricity: string; condition: string; security: string; communication: string;
  };
};

export default function Scenario() {
  const { roomId } = useParams();
  const navigate = useNavigate();
  const [scenario, setScenario] = useState<Scenario | null>(null);
  const [host, setHost]   = useState<string | null>(null);
  const name = localStorage.getItem("playerName") || "–ò–≥—Ä–æ–∫";

  /* 1. –ó–∞–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏—è + —Å–ª–µ–¥–∏–º –∑–∞ —Ñ–ª–∞–≥–æ–º showCards */
  useEffect(() => {
    if (!roomId) return;
    const ref = doc(db, "rooms", roomId);

    const unsub = onSnapshot(ref, snap => {
      const data = snap.data();
      if (!data) return;

      setHost(data.host);
      if (data.scenario) setScenario(data.scenario);

      if (data.showCards) {
        navigate(`/game/${roomId}`);          // –≤—Å–µ –ø–µ—Ä–µ—Ö–æ–¥—è—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      }
    });

    return () => unsub();
  }, [roomId, navigate]);

  /* 2. –•–æ—Å—Ç –Ω–∞–∂–∏–º–∞–µ—Ç ‚Äì –≤—ã—Å—Ç–∞–≤–ª—è–µ–º showCards:true */
  const handleShowCards = async () => {
    const roomRef = doc(db, "rooms", roomId!);
    const playersRef = collection(db, "rooms", roomId!, "players");
    const playerDocs = await getDocs(playersRef);
    const allNames = playerDocs.docs.map(doc => doc.id);

    await updateDoc(roomRef, {
      showCards: true,
      currentTurn: allNames[0],
      revealedFields: {},
      votes: {},
      expelled: [],
      phase: "reveal", // üî• –Ω–æ–≤–æ–µ –ø–æ–ª–µ
    });
  };

  if (!scenario) return (
    <div className="text-white text-center mt-10">–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è‚Ä¶</div>
  );

  const { catastrophe, bunker } = scenario;
  const isHost = host === name;

  return (
    <div className="min-h-screen bg-black text-white flex items-center justify-center p-6">
      <div className="bg-gray-900 p-8 rounded-2xl shadow-lg w-full max-w-3xl space-y-6">
        {/* –ö–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞ */}
        <h1 className="text-3xl font-bold text-red-500 text-center">
          üí• {catastrophe.name}
        </h1>
        <p className="text-gray-300 text-center italic">{catastrophe.description}</p>

        {/* –ë—É–Ω–∫–µ—Ä */}
        <h2 className="text-2xl font-semibold text-center mb-4">üè† –£—Å–ª–æ–≤–∏—è –≤ –±—É–Ω–∫–µ—Ä–µ</h2>
        <ul className="grid grid-cols-1 sm:grid-cols-2 gap-3 text-sm sm:text-base">
          <li>üìê <strong>–†–∞–∑–º–µ—Ä:</strong> {bunker.size}</li>
          <li>üë• <strong>–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:</strong> {bunker.capacity}</li>
          <li>ü•´ <strong>–ï–¥–∞:</strong> {bunker.food}</li>
          <li>üíß <strong>–í–æ–¥–∞:</strong> {bunker.water}</li>
          <li>‚ö° <strong>–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ:</strong> {bunker.electricity}</li>
          <li>üèöÔ∏è <strong>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</strong> {bunker.condition}</li>
          <li>üîí <strong>–ó–∞—â–∏—Ç–∞:</strong> {bunker.security}</li>
          <li>üì° <strong>–°–≤—è–∑—å:</strong> {bunker.communication}</li>
        </ul>

        {/* –ö–Ω–æ–ø–∫–∞ –≤–∏–¥–Ω–∞ —Ç–æ–ª—å–∫–æ —Ö–æ—Å—Ç—É */}
        {isHost && (
          <div className="text-center">
            <button
              onClick={handleShowCards}
              className="bg-green-600 hover:bg-green-700 px-6 py-2 rounded-xl mt-4 font-semibold"
            >
              –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞—Ä—Ç–æ—á–∫–∞–º –∏–≥—Ä–æ–∫–æ–≤
            </button>
          </div>
        )}
      </div>
    </div>
  );
}
